// <auto-generated />
using System;
using EverTask.Storage.Sqlite;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EverTask.Storage.Sqlite.Migrations
{
    [DbContext(typeof(SqliteTaskStoreContext))]
    partial class SqliteTaskStoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.20");

            modelBuilder.Entity("EverTask.Storage.QueuedTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CurrentRunCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Exception")
                        .HasColumnType("TEXT");

                    b.Property<string>("Handler")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LastExecutionUtc")
                        .HasColumnType("TEXT");

                    b.Property<int?>("MaxRuns")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("NextRunUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("QueueName")
                        .HasColumnType("TEXT");

                    b.Property<string>("RecurringInfo")
                        .HasColumnType("TEXT");

                    b.Property<string>("RecurringTask")
                        .HasColumnType("TEXT");

                    b.Property<string>("Request")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("RunUntil")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("ScheduledExecutionUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("TaskKey")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Status");

                    b.HasIndex("TaskKey")
                        .IsUnique();

                    b.ToTable("QueuedTasks");
                });

            modelBuilder.Entity("EverTask.Storage.RunsAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Exception")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("ExecutedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("QueuedTaskId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("QueuedTaskId");

                    b.ToTable("RunsAudit");
                });

            modelBuilder.Entity("EverTask.Storage.StatusAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Exception")
                        .HasColumnType("TEXT");

                    b.Property<string>("NewStatus")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("QueuedTaskId")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("UpdatedAtUtc")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("QueuedTaskId");

                    b.ToTable("StatusAudit");
                });

            modelBuilder.Entity("EverTask.Storage.TaskExecutionLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ExceptionDetails")
                        .HasColumnType("TEXT");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("TEXT");

                    b.Property<int>("SequenceNumber")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("TimestampUtc")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TaskId", "TimestampUtc")
                        .HasDatabaseName("IX_TaskExecutionLogs_TaskId_TimestampUtc");

                    b.ToTable("TaskExecutionLogs");
                });

            modelBuilder.Entity("EverTask.Storage.RunsAudit", b =>
                {
                    b.HasOne("EverTask.Storage.QueuedTask", "QueuedTask")
                        .WithMany("RunsAudits")
                        .HasForeignKey("QueuedTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QueuedTask");
                });

            modelBuilder.Entity("EverTask.Storage.StatusAudit", b =>
                {
                    b.HasOne("EverTask.Storage.QueuedTask", "QueuedTask")
                        .WithMany("StatusAudits")
                        .HasForeignKey("QueuedTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QueuedTask");
                });

            modelBuilder.Entity("EverTask.Storage.TaskExecutionLog", b =>
                {
                    b.HasOne("EverTask.Storage.QueuedTask", "Task")
                        .WithMany("ExecutionLogs")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("EverTask.Storage.QueuedTask", b =>
                {
                    b.Navigation("ExecutionLogs");

                    b.Navigation("RunsAudits");

                    b.Navigation("StatusAudits");
                });
#pragma warning restore 612, 618
        }
    }
}
